/*
 * This file is generated by jOOQ.
 */
package generated.mutiny.reactive.mysql.tables.records;


import generated.mutiny.reactive.mysql.tables.Stringkey;
import generated.mutiny.reactive.mysql.tables.interfaces.IStringkey;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StringkeyRecord extends UpdatableRecordImpl<StringkeyRecord> implements VertxPojo, Record2<String, Integer>, IStringkey {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>vertx.stringKey.key</code>.
     */
    @Override
    public StringkeyRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>vertx.stringKey.key</code>.
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>vertx.stringKey.value</code>.
     */
    @Override
    public StringkeyRecord setValue(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>vertx.stringKey.value</code>.
     */
    @Override
    public Integer getValue() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Stringkey.STRINGKEY.KEY;
    }

    @Override
    public Field<Integer> field2() {
        return Stringkey.STRINGKEY.VALUE;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public Integer component2() {
        return getValue();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public Integer value2() {
        return getValue();
    }

    @Override
    public StringkeyRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public StringkeyRecord value2(Integer value) {
        setValue(value);
        return this;
    }

    @Override
    public StringkeyRecord values(String value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IStringkey from) {
        setKey(from.getKey());
        setValue(from.getValue());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IStringkey> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StringkeyRecord
     */
    public StringkeyRecord() {
        super(Stringkey.STRINGKEY);
    }

    /**
     * Create a detached, initialised StringkeyRecord
     */
    public StringkeyRecord(String key, Integer value) {
        super(Stringkey.STRINGKEY);

        setKey(key);
        setValue(value);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StringkeyRecord
     */
    public StringkeyRecord(generated.mutiny.reactive.mysql.tables.pojos.Stringkey value) {
        super(Stringkey.STRINGKEY);

        if (value != null) {
            setKey(value.getKey());
            setValue(value.getValue());
            resetChangedOnNotNull();
        }
    }

        public StringkeyRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
