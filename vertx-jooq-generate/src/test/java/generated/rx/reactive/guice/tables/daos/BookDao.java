/*
 * This file is generated by jOOQ.
 */
package generated.rx.reactive.guice.tables.daos;


import generated.rx.reactive.guice.tables.Book;
import generated.rx.reactive.guice.tables.records.BookRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@javax.inject.Singleton
public class BookDao extends AbstractReactiveVertxDAO<BookRecord, generated.rx.reactive.guice.tables.pojos.Book, Integer, Single<List<generated.rx.reactive.guice.tables.pojos.Book>>, Single<Optional<generated.rx.reactive.guice.tables.pojos.Book>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<BookRecord,generated.rx.reactive.guice.tables.pojos.Book,Integer> {
        @javax.inject.Inject

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public BookDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Book.BOOK, generated.rx.reactive.guice.tables.pojos.Book.class, new ReactiveRXQueryExecutor<BookRecord,generated.rx.reactive.guice.tables.pojos.Book,Integer>(configuration,delegate,generated.rx.reactive.guice.tables.mappers.RowMappers.getBookMapper()));
        }

        @Override
        protected Integer getId(generated.rx.reactive.guice.tables.pojos.Book object) {
                return object.getId();
        }

        /**
     * Find records that have <code>label IN (values)</code> asynchronously
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByLabel(Collection<String> values) {
                return findManyByCondition(Book.BOOK.LABEL.in(values));
        }

        /**
     * Find records that have <code>label IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByLabel(Collection<String> values, int limit) {
                return findManyByCondition(Book.BOOK.LABEL.in(values),limit);
        }

        /**
     * Find records that have <code>long_Field IN (values)</code> asynchronously
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByLongField(Collection<Long> values) {
                return findManyByCondition(Book.BOOK.LONG_FIELD.in(values));
        }

        /**
     * Find records that have <code>long_Field IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByLongField(Collection<Long> values, int limit) {
                return findManyByCondition(Book.BOOK.LONG_FIELD.in(values),limit);
        }

        /**
     * Find records that have <code>author_id IN (values)</code> asynchronously
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByAuthorId(Collection<Integer> values) {
                return findManyByCondition(Book.BOOK.AUTHOR_ID.in(values));
        }

        /**
     * Find records that have <code>author_id IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Single<List<generated.rx.reactive.guice.tables.pojos.Book>> findManyByAuthorId(Collection<Integer> values, int limit) {
                return findManyByCondition(Book.BOOK.AUTHOR_ID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<BookRecord,generated.rx.reactive.guice.tables.pojos.Book,Integer> queryExecutor(){
                return (ReactiveRXQueryExecutor<BookRecord,generated.rx.reactive.guice.tables.pojos.Book,Integer>) super.queryExecutor();
        }
}
